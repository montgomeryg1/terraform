name: 'Terraform GitHub Actions'
on:
  - pull_request
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@master

      - name: Run a Terraform fmt  
        uses: docker://hashicorp/terraform:0.12.20
        with:
          entrypoint: terraform
          args: fmt

      - name: Add & Commit
        uses: EndBug/add-and-commit@v3.0.0
        with:
          # The name of the user that will be displayed as the author of the commit
          author_name: montgomeryg1 # optional
          # The email of the user that will be displayed as the author of the commit
          author_email: montgomery.wg@gmail.com # optional
          # The directory where your repository is located. You should use actions/checkout first to set it up
          cwd: . # optional, default is .
          # Whether to use the force option on git add, in order to bypass eventual gitignores
          force: false # optional, default is false
          # The message for the commit
          message: Commit from GitHub Actions # optional, default is Commit from GitHub Actions
          # The path to stage files from
          path: . # optional, default is .
    
      - name: 'containers - Terraform Format'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'fmt'
          tf_actions_working_dir: 'containers'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_API_TOKEN }}
          
      - name: 'containers - Terraform Init'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: 'containers'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_API_TOKEN }}
          
      - name: 'containers - Terraform Validate'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'validate'
          tf_actions_working_dir: 'containers'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_API_TOKEN }}
      
      - name: 'containers - Terraform Plan'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: 'containers'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_API_TOKEN }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          
      - name: 'elastic_pool - Terraform Format'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'fmt'
          tf_actions_working_dir: 'elastic_pool'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_API_TOKEN }}
          
      - name: 'elastic_pool - Terraform Init'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: 'elastic_pool'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_API_TOKEN }}
          
      - name: 'elastic_pool - Terraform Validate'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'validate'
          tf_actions_working_dir: 'elastic_pool'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_API_TOKEN }}
      
      - name: 'elastic_pool - Terraform Plan'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: 'elastic_pool'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_API_TOKEN }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}   

      - name: 'k8s - Terraform Format'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'fmt'
          tf_actions_working_dir: 'k8s'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_API_TOKEN }}
          
      - name: 'k8s - Terraform Init'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: 'k8s'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_API_TOKEN }}
          
      - name: 'k8s - Terraform Validate'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'validate'
          tf_actions_working_dir: 'k8s'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_API_TOKEN }}
      
      - name: 'k8s - Terraform Plan'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: 'k8s'
          args: '-var="kubernetes_client_id=${{ secrets.kubernetes_client_id}}" -var="kubernetes_client_secret=${{ secrets.kubernetes_client_secret}}"'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_API_TOKEN }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          
      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Get dependencies
        run: |
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          else
            go get -v -t -d ./...  
          fi          
