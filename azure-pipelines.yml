# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(Build.BuildId)

trigger:
  - master

pr:
  - master

pool:
  vmImage: "ubuntu-latest"

variables:
  - group: ServicePrincipal
  - name: azure_resource_group_name
    value: "TerraformTesting-$(Build.BuildId)"
  - name: subscription_id
    value: "60020c84-fca0-4d3b-ab6a-502ba1028851"
  - name: application_id
    value: "5305bcc1-1bf5-4af7-b7b9-b9440b2ff28e"
  - name: tenant_id
    value: "244126a8-5f50-4bbd-843f-add51306a77b"
  - name: terraform.version
    value: "0.12.21"
  - name: storage_acct
    value: "artifactsdevelopment"
  - name: access_key
    value: "empty"
  - name: state.key
    value: "TFSTATE"
  - name: terraform.path
    value: "containers"

steps:
  - task: TerraformInstaller@0
    inputs:
      terraformVersion: "$(terraform.version)"

  - script: |
      az login --service-principal -u $(application_id) -p $(ServerAutomationDemo-AppPw) --tenant $(tenant_id)
      ACCESS_KEY=`az storage account keys list -n $(storage_acct) -o json | jq -r '.[0].value'`
      echo "##vso[task.setvariable variable=access_key]$ACCESS_KEY"
    displayName: "Get ACCESS_KEY"

  - script: |
      {
        echo 'tenant_id = "$(tenant_id)"'
        echo 'subscription_id = "$(subscription_id)"'
        echo 'client_id = "$(application_id)"'
        echo 'client_secret = "$(ServerAutomationDemo-AppPw)"'
        echo 'access_key = "$(access_key)"'
      } >> '$(terraform.path)'/terraform.tfvars
    displayName: "Create terraform.tfvars"

  - script: |
      {
        echo 'terraform {'
        echo '  backend "azurerm" {'
        echo '    resource_group_name = "artifacts"'
        echo '    storage_account_name = "artifactsdevelopment"'
        echo '    container_name = "tf-statefiles"'
        echo '    key = "TFSTATE"'
        echo '    access_key = "$(access_key)"'
        echo '  }'
        echo '}'
      } >> '$(terraform.path)'/backend.tf
    displayName: "Create backend file"

  - script: |
      terraform init -no-color -input=false
      terraform plan -out=tfplan -no-color -input=false -var-file terraform.tfvars
    displayName: "Terraform Init and Plan"
    workingDirectory: "$(terraform.path)"

  - task: GoTool@0
    inputs:
      version: '1.13'

  - script: |
      if [ -f Gopkg.toml ]; then
          curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
          dep ensure
      else
        go get -v -t -d ./...  
      fi
    displayName: get Go dependencies

  - script: |
      cd test
      ls -la
      go test --run TestUbuntuVm -timeout 60m