# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(Build.BuildId)

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: ServicePrincipal
  - name: azure_resource_group_name
    value: "TerraformTesting-$(Build.BuildId)"
  - name: subscription_id
    value: "60020c84-fca0-4d3b-ab6a-502ba1028851"
  - name: application_id
    value: "5305bcc1-1bf5-4af7-b7b9-b9440b2ff28e"
  - name: tenant_id
    value: "244126a8-5f50-4bbd-843f-add51306a77b"
  - name: terraform.version
    value: "0.12.21"
  - name: storage_acct
    value: "artifactsdevelopment"
  - name: access_key
    value: "empty"
  - name: state.key
    value: 'TFSTATE'
  - name: terraform.path
    value: 'containers'

steps:
  - task: JamiePhillips.Terraform.TerraformTool.TerraformTool@0
    displayName: 'Use Terraform $(terraform.version)'
    inputs:
      version: '$(terraform.version)'
  
  - script: |
      az login --service-principal -u $(application_id) -p $(ServerAutomationDemo-AppPw) --tenant $(tenant_id)
      ACCESS_KEY=`az storage account keys list -n $(storage_acct) -o json | jq -r '.[0].value'`
      echo "##vso[task.setvariable variable=access_key]$ACCESS_KEY"
    displayName: 'AZ Login and Set ACCESS_KEY'
    
  - script: |
      cat << EOT >> terraform.tfvars
      access_key = "$(access_key)"
      tenant_id = "$(tenant_id)"
      subscription_id = "$(subscription_id)"
      client_id = "$(application_id)"
      client_secret = "$(ServerAutomationDemo-AppPw)"
      EOT
    workingDirectory: '$(terraform.path)'
    displayName: 'Create terraform.tfvars'
  
  - script: |
      terraform validate -check-variables=false
    workingDirectory: '$(terraform.path)'
    displayName: 'Terraform Validate'
  
  # - script: |
  #     git config --global --list | grep url. | awk -F '.instead' '{print $1}' | while read line
  #     do
  #       echo $line
  #       git config --global --remove-section $line
  #     done
  #     git config --global url."https://ado:$(System.AccessToken)@foo".insteadOf https://foo
  #     git init
  #   displayName: 'Redirect foo git URLs to use the Access Token So Modules Can Be Pulled In'
  
  - script: |
      terraform init -backend-config=resource_group_name=artifacts -backend-config=storage_account_name=artifactsdevelopment -backend-config=container_name=tf-statefiles -backend-config=key=$(state.key) -backend-config=access_key=$(access_key) -no-color -input=false
      terraform plan -out=tfplan -no-color -input=false
    displayName: 'Terraform Plan'
    workingDirectory: '$(terraform.path)'
      
  # - script: |
  #     git config --global --remove-section url.https://ado:$(System.AccessToken)@MYDOMAIN
  #   displayName: 'Remove git URL Redirect'
  #   continueOnError: true
  #   condition: always()

# steps:
# - task: TerraformTaskV1@0
#   inputs:
#     provider: 'azurerm'
#     command: 'init'
#     workingDirectory: '$(System.DefaultWorkingDirectory)/containers'
#     backendServiceArm: 'ARM'
#     backendAzureRmResourceGroupName: 'artifacts'
#     backendAzureRmStorageAccountName: 'artifactsdevelopment'
#     backendAzureRmContainerName: 'metrix'
#     backendAzureRmKey: 'containers'

# - task: TerraformTaskV1@0
#   inputs:
#     provider: 'azurerm'
#     command: 'plan'
#     workingDirectory: '$(System.DefaultWorkingDirectory)/containers'
#     environmentServiceNameAzureRM: 'ARM'