name: $(Build.BuildId)

trigger:
  - master

pr:
  - master

pool:
  vmImage: "vs2017-win2016"

variables:
  - group: ServicePrincipal
  - name: azure_resource_group_name
    value: "TerraformTesting-$(Build.BuildId)"
  - name: subscription_id
    value: "60020c84-fca0-4d3b-ab6a-502ba1028851"
  - name: application_id
    value: "5305bcc1-1bf5-4af7-b7b9-b9440b2ff28e"
  - name: tenant_id
    value: "244126a8-5f50-4bbd-843f-add51306a77b"
  - name: terraform.version
    value: "0.12.21"
  - name: storage_acct
    value: "artifactsdevelopment"
  - name: access_key
    value: "empty"
  - name: state.key
    value: "TFSTATE"
  - name: terraform.path
    value: "ubuntu_vm"

steps:
  - task: TerraformInstaller@0
    inputs:
      terraformVersion: "$(terraform.version)"
    displayName: Install Terraform
  
  - script: |
      az login --service-principal -u $(application_id) -p $(ServerAutomationDemo-AppPw) --tenant $(tenant_id)
    displayName: "Azure CLI login"

  # - script: |
  #     az login --service-principal -u $(application_id) -p $(ServerAutomationDemo-AppPw) --tenant $(tenant_id)
  #     ACCESS_KEY=`az storage account keys list -n $(storage_acct) -o json | jq -r '.[0].value'`
  #     echo "##vso[task.setvariable variable=access_key]$ACCESS_KEY"
  #   displayName: "Get ACCESS_KEY"

  # - script: |
  #     {
  #       echo 'tenant_id = "$(tenant_id)"'
  #       echo 'subscription_id = "$(subscription_id)"'
  #       echo 'client_id = "$(application_id)"'
  #       echo 'client_secret = "$(ServerAutomationDemo-AppPw)"'
  #     } >> '$(terraform.path)'/terraform.tfvars
  #   displayName: "Create terraform.tfvars"

  - script: |
      New-Item -ItemType File -Name terraform.tfvars -Path $(terraform.path)
      Add-Content $(terraform.path)/terraform.tfvars -value "tenant_id = $(tenant_id)"
      Add-Content $(terraform.path)/terraform.tfvars -value "subscription_id = $(subscription_id)"
      Add-Content $(terraform.path)/terraform.tfvars -value "client_id = $(application_id)"
      Add-Content $(terraform.path)/terraform.tfvars -value "client_secret = $(ServerAutomationDemo-AppPw)"
      cd $(terraform.path)
      terraform workspace new ci
      terraform init
      terraform apply -auto-approve -compact-warnings -input=false -no-color
    displayName: "Create terraform.tfvars"

  - task: AzSKSVTs@4
    inputs:
      ConnectedServiceNameARM: 'ARM'
      GenerateMethodParameterSetSelection: 'ResourceGroupName'
      ResourceGroupName: 'ubuntuvm-resources'
      SubscriptionId: '60020c84-fca0-4d3b-ab6a-502ba1028851'
      EnableOMSLogging: false    

  # - script: |
  #     {
  #       echo 'terraform {'
  #       echo '  backend "azurerm" {'
  #       echo '    resource_group_name = "artifacts"'
  #       echo '    storage_account_name = "$(storage_acct)"'
  #       echo '    container_name = "tf-statefiles"'
  #       echo '    key = "$(state.key)"'
  #       echo '    access_key = "$(access_key)"'
  #       echo '  }'
  #       echo '}'
  #     } >> '$(terraform.path)'/backend.tf
  #   displayName: "Create backend file"

  # - script: |
  #     terraform init -no-color -input=false
  #     terraform plan -out=tfplan -no-color -input=false -var-file terraform.tfvars
  #   displayName: "Terraform Init and Plan"
  #   workingDirectory: "$(terraform.path)"

  # - task: GoTool@0
  #   inputs:
  #     version: '1.13'
  #   displayName: Install Go

  # - script: |
  #     if [ -f Gopkg.toml ]; then
  #         curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
  #         dep ensure
  #     else
  #       go get -v -t -d ./...  
  #     fi
  #   displayName: Get Go dependencies

  # - script: |
  #     cd test
  #     ls -la
  #     go test --run TestUbuntuVm -timeout 60m
  #   displayName: Run UbuntuVm Terratest

  - script: |
      az group delete --name ubuntuvm-resources --yes
    displayName: cleanup
    condition: failed()