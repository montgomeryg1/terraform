name: $(Build.BuildId)

trigger:
  - master

pr:
  - master

pool:
  vmImage: "ubuntu-latest"

variables:
  - group: CI
  - group: CI_release
  - name: terraform.version
    value: "0.12.23"
  - name: storage_rg
    value: "artifacts"
  - name: storage_acct
    value: "artifactsdevelopment"
  - name: access_key
    value: "empty"
  - name: terraform.name
    value: "ubuntuvm"

jobs:
  - job: Terraform
    steps:

      - task: WhiteSource Bolt@20
        inputs:
          cwd: '*'

      - script: |
          az login --service-principal -u $(applicationID) -p $(applicationSecret) --tenant $(tenantID)
          ACCESS_KEY=`az storage account keys list -n $(storage_acct) -o json | jq -r '.[0].value'`
          echo "##vso[task.setvariable variable=access_key]$ACCESS_KEY"
        displayName: "Azure CLI Login"

      # - script: |
      #     {
      #       echo 'terraform {'
      #       echo '  backend "azurerm" {'
      #       echo '    resource_group_name = "$(storage_rg)"'
      #       echo '    storage_account_name = "$(storage_acct)"'
      #       echo '    container_name = "tf-statefiles"'
      #       echo '    key = "$(terraform.name)"'
      #       echo '    access_key = "$(access_key)"'
      #       echo '  }'
      #       echo '}'
      #     } >> '$(terraform.name)'/backend.tf
      #   displayName: "Create backend file"      

      # - script: |
      #       {
      #         echo 'tenant_id = "$(tenantID)"'
      #         echo 'subscription_id = "$(subscriptionID)"'
      #         echo 'client_id = "$(applicationID)"'
      #         echo 'client_secret = "$(applicationSecret)"'
      #       } >> '$(terraform.name)'/terraform.tfvars
      #   displayName: "Create terraform.tfvars"

      - task: replacetokens@3
        inputs:
          targetFiles: '**/*.tf'
          encoding: 'auto'
          writeBOM: true
          actionOnMissing: 'warn'
          keepToken: false
          tokenPrefix: '__'
          tokenSuffix: '__'

      - script: |
          cd $(terraform.name)
          cat backend.tf
          terraform workspace new ci
          terraform init -no-color
          terraform apply -no-color
        displayName: "Terraform init and apply" 

      - task: Pester@0
        inputs:
          scriptFolder: "@{Path='$(System.DefaultWorkingDirectory)/pester.test.ps1'; Parameters=@{rgName='$(rgName)';vmName='$(vmName)'}}"
          resultsFile: "$(System.DefaultWorkingDirectory)/pester.test.XML"
          usePSCore: true
          run32Bit: False

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: "NUnit"
          testResultsFiles: "$(System.DefaultWorkingDirectory)/pester.test.XML"
          failTaskOnFailedTests: true        

      - task: CopyFiles@2
        inputs:
          SourceFolder: '$(terraform.name)'
          Contents: '**'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
          CleanTargetFolder: true
          OverWrite: true

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'        

      # - task: GoTool@0
      #   inputs:
      #     version: '1.13'
      #   displayName: Install Go

      # - script: |
      #     if [ -f Gopkg.toml ]; then
      #         curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
      #         dep ensure
      #     else
      #       go get -v -t -d ./...  
      #     fi
      #   displayName: Get Go dependencies

      # - script: |
      #     az group delete --name testing-resources --yes
      #   displayName: cleanup
      #   condition: failed()
